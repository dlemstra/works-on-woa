---
import { getEntry, type CollectionEntry } from "astro:content";
import BaseHead from "../components/Common/BaseHead.astro";
import Header from "../components/Common/Header.astro";
import Footer from "../components/Common/Footer.astro";
import { toTitleCase } from "../util/formatting";
import PageFind from "../components/Search/PageFind.astro";

type Props = CollectionEntry<"projects">;

const { data } = Astro.props;

// extract generic fields
const textFields = Object.entries(data).filter(
  ([key]) =>
    key !== "icon" && key !== "name" && key !== "categories" && key !== "link"
) as [string, string][];

// extract special fields
const { link, icon, name, categories } = data;

// get category data from references
const categoryPromises = categories.map(async (category) =>
  getEntry("categories", category.id)
);
const categoriesData = await Promise.all(categoryPromises);

// construct field array
const fields = [
  ...textFields.map((field) => ({
    key: field[0],
    value: field[1],
    type: "text",
  })),
  {
    key: "link",
    value: link,
    type: "link",
  },
  {
    key: "categories",
    value: categoriesData,
    type: "array",
  },
];

const sortOrder = ["support", "categories", "versionFrom", "link", "notes"];

const sortKeys = sortOrder.reduce((obj: any, item: string, index: number) => {
  return {
    ...obj,
    [item]: index,
  };
}, {});

fields.sort((a, b) => sortKeys[a.key] - sortKeys[b.key]);

// list filtering fields
const filters = ["categories", "support"];
---

<html lang="en">
  <head>
    <BaseHead title={name} description={data.notes || name} />
  </head>

  <body class="min-h-screen flex flex-col">
    <Header />
    <main
      class="w-full flex flex-col items-center basis-full flex-grow"
      data-pagefind-body
    >
      <article class="w-2/3">
        <h1 class="font-bold text-3xl px-0">{name}</h1>
        <div
          class="p-5 bg-white text-black rounded-xl flex flex-row-reverse justify-between items-start"
        >
          <img src={`/icons/${icon}`} width="100px" />
          <ul>
            {
              fields.map((field) => (
                <li>
                  <b data-pagefind-ignore>{toTitleCase(field.key)}</b>
                  {field.type === "array" ? (
                    <p>
                      {(field.value as typeof categoriesData).map((value) => (
                        <span data-pagefind-filter={field.key}>
                          {value.data.name}
                        </span>
                      ))}
                    </p>
                  ) : (
                    <p
                      data-pagefind-filter={
                        filters.includes(field.key) && field.key
                      }
                      data-pagefind-ignore={filters.includes(field.key)}
                    >
                      {field.type === "link" ? (
                        <a href={field.value as string} class="text-blue-700">
                          {field.value}
                        </a>
                      ) : (
                        field.value
                      )}
                    </p>
                  )}
                </li>
              ))
            }
          </ul>
        </div>
      </article>
      <article class="w-2/3 mt-12">
        <PageFind />
      </article>
    </main>
    <Footer />
  </body>
</html>
